import { BechLib } from 'bech32';
import { Region } from './memory';
import { IBackend } from './backend';
import { Env, MessageInfo } from './types';
export declare const MAX_LENGTH_DB_KEY: number;
export declare const MAX_LENGTH_DB_VALUE: number;
export declare const MAX_LENGTH_CANONICAL_ADDRESS: number;
export declare const MAX_LENGTH_HUMAN_ADDRESS: number;
export declare const MAX_LENGTH_ED25519_SIGNATURE: number;
export declare const MAX_LENGTH_ED25519_MESSAGE: number;
export declare const EDDSA_PUBKEY_LEN: number;
export declare class VMInstance {
    backend: IBackend;
    readonly gasLimit?: number | undefined;
    instance?: WebAssembly.Instance;
    bech32: BechLib;
    debugMsgs: string[];
    constructor(backend: IBackend, gasLimit?: number | undefined);
    build(wasmByteCode: ArrayBuffer): Promise<void>;
    get exports(): any;
    get remainingGas(): number | undefined;
    allocate(size: number): Region;
    deallocate(region: Region): void;
    allocate_bytes(bytes: Uint8Array): Region;
    allocate_b64(b64: string): Region;
    allocate_str(str: string): Region;
    allocate_json(obj: object): Region;
    instantiate(env: Env, info: MessageInfo, msg: object): Region;
    execute(env: Env, info: MessageInfo, msg: object): Region;
    query(env: Env, msg: object): Region;
    migrate(env: Env, msg: object): Region;
    reply(env: Env, msg: object): Region;
    db_read(key_ptr: number): number;
    db_write(key_ptr: number, value_ptr: number): void;
    db_remove(key_ptr: number): void;
    db_scan(start_ptr: number, end_ptr: number, order: number): number;
    db_next(iterator_id_ptr: number): number;
    addr_canonicalize(source_ptr: number, destination_ptr: number): number;
    addr_humanize(source_ptr: number, destination_ptr: number): number;
    addr_validate(source_ptr: number): number;
    secp256k1_verify(hash_ptr: number, signature_ptr: number, pubkey_ptr: number): number;
    secp256k1_recover_pubkey(hash_ptr: number, signature_ptr: number, recover_param: number): bigint;
    ed25519_verify(message_ptr: number, signature_ptr: number, pubkey_ptr: number): number;
    ed25519_batch_verify(messages_ptr: number, signatures_ptr: number, public_keys_ptr: number): number;
    curve_hash(input_ptr: number, destination_ptr: number): number;
    poseidon_hash(inputs_ptr: number, destination_ptr: number): number;
    groth16_verify(input_ptr: number, public_ptr: number, vk_ptr: number): number;
    debug(message_ptr: number): void;
    query_chain(request_ptr: number): number;
    abort(message_ptr: number): void;
    region(ptr: number): Region;
    do_db_read(key: Region): Region;
    do_db_write(key: Region, value: Region): void;
    do_db_remove(key: Region): void;
    do_db_scan(start: Region, end: Region, order: number): Region;
    do_db_next(iterator_id: Region): Region;
    do_addr_humanize(source: Region, destination: Region): Region;
    do_addr_canonicalize(source: Region, destination: Region): Region;
    do_addr_validate(source: Region): Region;
    do_secp256k1_verify(hash: Region, signature: Region, pubkey: Region): number;
    do_secp256k1_recover_pubkey(msgHash: Region, signature: Region, recover_param: number): Region;
    do_ed25519_verify(message: Region, signature: Region, pubkey: Region): number;
    do_ed25519_batch_verify(messages_ptr: Region, signatures_ptr: Region, public_keys_ptr: Region): number;
    do_curve_hash(input: Region, destination: Region): Region;
    do_poseidon_hash(inputs: Region, destination: Region): Region;
    do_groth16_verify(input: Region, proof: Region, vk: Region): number;
    do_debug(message: Region): void;
    do_query_chain(request: Region): Region;
    do_abort(message: Region): void;
}
